// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract SimpleToken {
    // Public variables to store coin details
    string public tokenName;
    string public tokenAbbrv;
    uint256 public totalSupply;

    // Mapping of addresses to balances
    mapping(address => uint256) public balances;

    // Event to log mint and burn events
    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);

    // Constructor to initialize token details
    constructor(string memory _tokenName, string memory _tokenAbbrv, uint256 _initialSupply) {
        tokenName = _tokenName;
        tokenAbbrv = _tokenAbbrv;
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply; // Assign the initial supply to the contract deployer
    }

    // Mint function to create new tokens
    function mint(address _to, uint256 _value) public {
        totalSupply += _value;
        balances[_to] += _value;
        emit Mint(_to, _value);
    }

    // Burn function to destroy tokens
    function burn(address _from, uint256 _value) public {
        require(balances[_from] >= _value, "Insufficient balance to burn");
        require(_value <= totalSupply, "Cannot burn more tokens than total supply");

        totalSupply -= _value;
        balances[_from] -= _value;
        emit Burn(_from, _value);
    }
}
