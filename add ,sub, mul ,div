// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract Calc {
    uint public x;
    uint public y;

    function add() public view returns (uint) {
        uint result = x + y;
        return result;
    }

    function sub() public view returns (uint) {
      require(x>=y, "Otherwise negative result will appear");
        uint re = x - y;
        return re;
    }

    function mul() public view returns (uint) {
        uint res = x * y;
        return res;
    }

    function div() public view returns (uint) {
        require(y != 0, "Cannot divide by zero");
        uint resu = x / y;
        return resu;
    }

    function main(uint _x, uint _y) public  returns (uint, uint, uint, uint) {
        // Set values for x and y
        x = _x;
        y = _y;

        // Call other functions and return results
        uint addResult = add();
        uint subResult = sub();
        uint mulResult = mul();
        uint divResult = div();

        return (addResult, subResult, mulResult, divResult);
    }
}
